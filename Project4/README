High level overview for Raw Sockets
- Pranav Gandhi (hyfi@ccs.neu.edu)
- Eric Chin (chiner@ccs.neu.edu)

USAGE:
./rawhttpget www.ccs.neu.edu/index.html

Our overall design scheme for this project was to mirror the socket api as closely as possible. This means implementing the following functions: socket(), connect(), send(), recv(). We did this by creating a wrapper class over socket called Shoe.

=======================================================================================

Shoe has several main functions for operation:

socket():
  returns a socket using socket.socket(AF_INET, SOCK_RAW, IPPROTO_RAW)

connect():
  This function performs a TCP 3 way handshake and also binds a local port to listen on for incoming packets, typically port 3289.

send():
  This function will send data to the server

recv():
  This function will run a socket.recvfrom on the socket that is listening on port 3289.

========================================================================================

Three way handshake:
  We first send a SYN packet to the server, then wait for a SYNACK. We parse the synack to get the seq/ack numbers and send back an ACK with the values formatted correctly. All our packets send a timestamp/echo value.


GET request:
  After the handshake, we send out a PSH/ACK packet containing the GET request for HTTP. This is where we start having trouble, the server sends back RST packets consistently. We tried to follow the model that CURL uses by following its progress on tcpdump.


========================================================================================

class IP:

generate_header():
  This function combines all the header fields and packs them together to produce a binary header for sending through the internet

The IP class has many fields that can be set. We start off by filling in the source ip and the destination ip in the constructor. We have a function "generate_header()" that packs all the fields together and produces binary to be prepended to the TCP packet and socket.sendto().

========================================================================================

class TCP:
  This class creates a tcp packet to be used by Shoe. It has several functions that do checksums and generate the packet based on the multitude of fields, flags, and options that are available to tcp. 

========================================================================================

Difficulties with the assignment:

We started off by using the built in IPPROTO_TCP and SOCK_RAW so that we could focus on TCP. It took us until 2 days after the due date to get the handshake and psh requests working properly. It turned out we were closing the socket BEFORE we were receiving data so the server kept sending RST packets. We tried many fixes throughout the process and it was only an hour before the deadline from our last slip day before we realized what had happened.

We are *still* having difficulty with acking every psh packet for some reason, our loop must not be constructed properly. With this difficulty, we were not able to combine data from the incoming packets so we could not write to the file.

We found that for some reason, our application stopped running before a remote server could send us a packet with the http/html data.

With 30 minutes left in the assignment, we realized we did not have time to do the portion of the assignment that would require us to combine the data from the packets so we wrote the basic function 'save_to_file' that would allow us to do that.

While we debugged, we implemented IP pretty easily.

We implemented HTTP well, IP well, and most of TCP before running out of time, and had some stellar documentation :)

In addition, we added a special feature to our script--run with the '-w' flag and the functionality is completely available.
